// In your .vscode/settings.json or global settings.json
{ // These settings configure the VS Code terminal to automatically
    // source the project's environment configuration script on startup.
    "terminal.integrated.profiles.linux": {
        "Project Bash": {
            "path": "bash",
            // This tells bash to run our custom init script instead of the default ~/.bashrc.
            // Our script then sources ~/.bashrc itself, so you don't lose your standard setup.
            "args": [
                "--init-file",
                "${workspaceFolder}/.vscode/terminal_init.sh"
            ]
        }
    },
    "terminal.integrated.defaultProfile.linux": "Project Bash",
    // --- Recommended Python Settings ---
    // Point to the project's virtual environment interpreter.
    "python.defaultInterpreterPath": "${workspaceFolder}/.venv/python3.12/bin/python",
    // We handle venv activation in our terminal_init.sh, so we disable the default activator
    // to prevent it from running twice.
    "python.terminal.activateEnvironment": false,
    // Specific configuration for an extension like "Run on Save" (by emeraldwalk)
    "emeraldwalk.runonsave": {
        "commands": [
            {
                "match": ".*\\.prompt(\\.md)?$", // Match any file ending in .prompt or .prompt.md                
                "cmd": ". ${workspaceFolder}/.scripts/configure.sh && rm -f ${fileBasename}.output.md && . ${workspaceFolder}/.venv/python3.12/bin/activate && .venv/python3.12/bin/python3 ${workspaceFolder}/.scripts/run_gemini_from_file.py ${file}",
                "runIn": "terminal", // Runs in the integrated terminal
                "runningStatusMessage": "Calling Gemini for ${fileBasename}...",
                "finishStatusMessage": "${fileBasename} processed by Gemini."
            },
            {
            // This command will run for any .yaml or .yml file saved directly within the prompts/ directory.
                "match": ".*\\/prompts\\/[^/]+\\.ya?ml$",
                "runIn": "terminal", // Runs in the integrated terminal
                // It executes the run_gemini_from_file.py script, passing the saved file's path as an argument.
                "cmd": ". ${workspaceFolder}/.scripts/configure.sh && rm -f ${fileBasename}.output.md && . ${workspaceFolder}/.venv/python3.12/bin/activate && .venv/python3.12/bin/python3 ${workspaceRoot}/.scripts/run_gemini_from_file.py ${file}"
            },
            {
                "match": ".*agent.*\\.md$", // Match any file containing 'agent' and ending in .md
                "cmd": ". ${workspaceFolder}/.scripts/configure.sh && rm -f ${fileDirname}/${fileBasenameNoExt}.output.md && . ${workspaceFolder}/.venv/python3.12/bin/activate && .venv/python3.12/bin/python3 ${workspaceFolder}/.scripts/run_agent.py ${file}",
                "runIn": "terminal",
                "runningStatusMessage": "Running Agent for ${fileBasename}...",
                "finishStatusMessage": "${fileBasename} processed by Agent."
            }
        ]
    }
    // OR, for a generic "File Watcher" type extension, the config might look different.
    // Always consult the specific extension's documentation.
}